{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of, Subject, throwError, BehaviorSubject } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.loggedIn = new BehaviorSubject(false);\n      this.accessToken = localStorage.getItem('accessToken');\n      this.logoutSubject = new Subject();\n      this.loginSubject = new Subject();\n    }\n\n    isLoggedIn() {\n      return !!this.accessToken;\n    }\n\n    getAccessToken() {\n      return localStorage.getItem('accessToken');\n    }\n\n    refreshAccessToken() {\n      let headers = new HttpHeaders();\n      headers = headers.set('Content-Type', 'application/json');\n      const refresh = {\n        refresh: this.refreshToken\n      };\n      return this.http.post('/tenant/public/jwt/v1/auth/jwt/refresh/', JSON.stringify(refresh), {\n        headers\n      }).pipe(mergeMap(result => {\n        if (result.access) {\n          this.accessToken = result.access;\n          localStorage.setItem('accessToken', this.accessToken);\n        }\n\n        return of(result.access);\n      }));\n    }\n\n    login(data) {\n      /*let headers = new HttpHeaders();\n      headers = headers.set('Content-Type', 'application/json');\n      headers = headers.set('Accept-Language', 'es');\n      // TODO Delete after local tests\n      return this.http.post<any>('/login/',\n        JSON.stringify(data),\n        { headers }\n      ).pipe(\n        mergeMap(result => {\n          if (result.access && result.refresh) {\n            this.accessToken = result.access;\n            this.refreshToken = result.refresh;\n            localStorage.setItem('accessToken', this.accessToken);\n            localStorage.setItem('refreshToken', this.refreshToken);\n            const userData = result.user;\n            this.setUserData(userData);\n            this.loginSubject.next(true);\n            return of(userData);\n          }\n          return of(result.key);\n        })\n      );*/\n      this.accessToken = data.ip;\n      localStorage.setItem('accessToken', data.ip);\n      return of(true);\n    }\n    /*getCurrentUserData(force): Observable<any> {\n      if (this.backendUser && !force) {\n        return of(this.backendUser);\n      } else {\n        return throwError(new Error('Not Logged In'));\n      }\n    }*/\n\n\n    setUserData(userData) {\n      this.backendUser = userData;\n      localStorage.setItem('current_user', JSON.stringify(this.backendUser));\n    }\n\n    logout() {\n      localStorage.removeItem('accessToken');\n      this.accessToken = null;\n      this.refreshToken = null;\n      this.backendUser = null;\n      this.logoutSubject.next(true);\n      this.loginSubject.next(false);\n      this.router.navigate(['/login']);\n    }\n\n    errorHandl(error) {\n      let errorMessage = '';\n\n      if (error.error instanceof ErrorEvent) {\n        // Get client-side error\n        errorMessage = error.error.message;\n      } else {\n        // Get server-side error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      return throwError(errorMessage);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}