{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let ProgressBarService = /*#__PURE__*/(() => {\n  class ProgressBarService {\n    constructor(router) {\n      this.router = router;\n      this.bufferValue = new BehaviorSubject(0);\n      this.mode = new BehaviorSubject('indeterminate');\n      this.value = new BehaviorSubject(0);\n      this.visible = new BehaviorSubject(false); // this.router.events\n      //   .pipe(filter((event) => event instanceof NavigationStart))\n      //   .subscribe(() => {\n      //     this.showBar();\n      //   });\n      // this.router.events\n      //   .pipe(filter((event) => event instanceof NavigationEnd || event instanceof NavigationError || event instanceof NavigationCancel))\n      //   .subscribe(() => {\n      //     this.hideBar();\n      //   });\n    }\n\n    get getBufferValue() {\n      return this.bufferValue.asObservable();\n    }\n\n    setBufferValue(value) {\n      this.bufferValue.next(value);\n    }\n\n    get getMode() {\n      return this.mode.asObservable();\n    }\n\n    setMode(value) {\n      this.mode.next(value);\n    }\n\n    get getValue() {\n      return this.value.asObservable();\n    }\n\n    setValue(value) {\n      this.value.next(value);\n    }\n\n    get getVisible() {\n      return this.visible.asObservable();\n    }\n\n    showBar() {\n      this.visible.next(true);\n    }\n\n    hideBar() {\n      this.visible.next(false);\n    }\n\n  }\n\n  ProgressBarService.ɵfac = function ProgressBarService_Factory(t) {\n    return new (t || ProgressBarService)(i0.ɵɵinject(i1.Router));\n  };\n\n  ProgressBarService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProgressBarService,\n    factory: ProgressBarService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProgressBarService;\n})();","map":null,"metadata":{},"sourceType":"module"}