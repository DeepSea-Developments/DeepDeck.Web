{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { ModalComponent } from 'src/app/modules/modal/modal.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/core/services/auth.service\";\nimport * as i3 from \"src/app/core/services/api/api.service\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"src/app/core/components/progress-bar/progress-bar.service\";\nimport * as i6 from \"@angular/material/dialog\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/icon\";\nimport * as i11 from \"@angular/material/button\";\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(route, router, authService, apiService, formBuilder, progressBar, dialog //public dialog: MatDialog,\n    // public _notificationService: NotificationService,\n    ) {\n      this.route = route;\n      this.router = router;\n      this.authService = authService;\n      this.apiService = apiService;\n      this.formBuilder = formBuilder;\n      this.progressBar = progressBar;\n      this.dialog = dialog;\n      this.submitted = false;\n      this.showErrorMessage = false;\n      this.hide = true;\n      this.showInvalidForm = false;\n    }\n\n    ngOnInit() {\n      this.loginForm = this.formBuilder.group({\n        ip: ['', [Validators.required, Validators.maxLength(150)]]\n      });\n    }\n\n    login() {\n      console.log(\"login\");\n      this.progressBar.showBar();\n\n      if (this.loginForm.dirty && this.loginForm.valid) {\n        const formulario = this.loginForm.value;\n        console.log(formulario);\n        this.showInvalidForm = false;\n        this.submitted = true;\n        this.authService.login(formulario).subscribe(answer => {\n          console.log(answer);\n          this.submitted = false;\n          this.progressBar.hideBar();\n          this.router.navigateByUrl('/keymap');\n          location.reload();\n        }, error => {\n          this.submitted = false;\n\n          if (error.status === 401) {\n            this.showErrorMessage = true;\n            this.progressBar.hideBar();\n          }\n        });\n      } else {\n        this.showInvalidForm = true;\n        console.log('formulario inválido');\n      }\n    }\n\n    ngAfterViewInit() {\n      this.submitted = true;\n\n      if (this.authService.isLoggedIn() == true) {\n        this.router.navigateByUrl('/network');\n      } else {\n        this.submitted = false;\n        this.router.navigateByUrl('/session');\n      }\n    }\n\n    showRetrieveDialog() {\n      const dialogRef = this.dialog.open(ModalComponent, {\n        width: '50%'\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        console.log('The dialog was closed');\n      });\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.ApiService), i0.ɵɵdirectiveInject(i4.FormBuilder), i0.ɵɵdirectiveInject(i5.ProgressBarService), i0.ɵɵdirectiveInject(i6.MatDialog));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 16,\n    vars: 1,\n    consts: [[\"name\", \"loginForm\", 3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"outline\"], [\"formControlName\", \"ip\", \"matInput\", \"\"], [\"matSuffix\", \"\"], [\"mat-stroked-button\", \"\", 1, \"login\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\")(1, \"h1\");\n        i0.ɵɵtext(2, \"Deepsea\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"br\");\n        i0.ɵɵelementStart(4, \"mat-card-content\")(5, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.login();\n        });\n        i0.ɵɵelementStart(6, \"p\")(7, \"mat-form-field\", 1)(8, \"mat-label\");\n        i0.ɵɵtext(9, \"IP Address\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 2);\n        i0.ɵɵelementStart(11, \"mat-icon\", 3);\n        i0.ɵɵtext(12, \"person\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(13, \"button\", 4);\n        i0.ɵɵtext(14, \"LogIn\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(15, \"br\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      }\n    },\n    directives: [i7.MatCard, i7.MatCardContent, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i8.MatFormField, i8.MatLabel, i4.DefaultValueAccessor, i9.MatInput, i4.NgControlStatus, i4.FormControlName, i10.MatIcon, i8.MatSuffix, i11.MatButton],\n    styles: [\"[_nghost-%COMP%]{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;height:100vh;background-color:#e8e8e8;background-repeat:no-repeat;background-size:cover;background-position:center}.mat-form-field[_ngcontent-%COMP%]{width:100%;min-width:300px}.error[_ngcontent-%COMP%]{padding:16px;width:300px;color:#fff;background-color:red}.login[_ngcontent-%COMP%]{width:100%!important;margin-bottom:15px}.recovery-password[_ngcontent-%COMP%]{display:flex;justify-content:flex-start;margin-top:15px;cursor:pointer;color:gray}\"]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}