{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { mergeMap } from 'rxjs/operators';\nimport { of, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.currentConfig = JSON.parse(localStorage.getItem('current_config'));\n      this.ipAddress = localStorage.getItem('accessToken');\n      console.log(this.ipAddress);\n    }\n\n    saveNetwork(data) {\n      return this.http.post(`http://${this.ipAddress}/api/connect`, JSON.stringify(data)).pipe(retry(1), catchError(this.errorHandl));\n    } // deleteElement(uuid: string): Observable<any> {\n    //   const url = `http://${this.ipAddress}/api/layers?uuid=${uuid}`;\n    //   return this.http.delete<any>(url).pipe(\n    //     retry(1),\n    //     catchError(this.errorHandl)\n    //   );\n    // }\n\n\n    deleteElement(uuid) {\n      const url = `http://${this.ipAddress}/api/layers?uuid=${uuid}`;\n      console.log('Sending DELETE request to:', url);\n      return this.http.delete(url).pipe( //retry(1),\n      //catchError((error) => {\n      //  console.error('Error in deleteElement:', error);\n      //  return of({ success: false, message: 'Error deleting the element.' });\n      //}\n      retry(1), catchError(this.errorHandl));\n    }\n\n    saveCloud(data) {\n      let headers = new HttpHeaders();\n      headers = headers.set('Content-Type', 'application/json');\n      headers = headers.set('Accept-Language', 'es');\n      return this.http.post('/save-cloud/', JSON.stringify(data), {\n        headers\n      }).pipe(retry(1), catchError(this.errorHandl));\n    }\n\n    saveDevice(data) {\n      let headers = new HttpHeaders();\n      headers = headers.set('Content-Type', 'application/json');\n      headers = headers.set('Accept-Language', 'es');\n      return this.http.post('/save-device/', JSON.stringify(data), {\n        headers\n      }).pipe(retry(1), catchError(this.errorHandl));\n    }\n\n    resetDevice(data) {\n      let headers = new HttpHeaders();\n      headers = headers.set('Content-Type', 'application/json');\n      headers = headers.set('Accept-Language', 'es');\n      return this.http.post('/reset/', JSON.stringify(data), {\n        headers\n      }).pipe(retry(1), catchError(this.errorHandl));\n    } // return this.http.get<any>(`http://${this.ipAddress}/api/layers/layer_names`).pipe(\n    //   retry(1),\n    //   catchError(this.errorHandl)\n    // ); \n\n\n    getCurrentConfigData(force) {\n      if (this.currentConfig && !force) {\n        return of(this.currentConfig);\n      } else {\n        let headers = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/json');\n        headers = headers.set('Accept-Language', 'es'); // TODO Delete after local tests\n\n        return this.http.get(`http://${this.ipAddress}/api/config`).pipe(mergeMap(result => {\n          const configData = result;\n          this.setConfigData(configData);\n          return of(configData);\n        }) // retry(1),\n        // catchError(this.errorHandl)\n        );\n      }\n    }\n\n    setConfigData(configData) {\n      this.currentConfig = configData;\n      localStorage.setItem('current_config', JSON.stringify(this.currentConfig));\n    }\n\n    getLayersName() {\n      // TODO Delete after local tests\n      return this.http.get(`http://${this.ipAddress}/api/layers/layer_names`).pipe(retry(1), catchError(this.errorHandl));\n    }\n\n    getLayersLayout(uuid, pos) {\n      let params = new HttpParams();\n\n      if (uuid) {\n        params = params.set('uuid', uuid);\n        params = params.set('pos', pos);\n      } // TODO Delete after local tests\n\n\n      return this.http.get(`http://${this.ipAddress}/api/layers`, {\n        params\n      }).pipe(retry(1), catchError(this.errorHandl));\n    }\n\n    updateLayersLayout(data) {\n      // TODO Delete after local tests\n      return this.http.put(`http://${this.ipAddress}/api/layers`, JSON.stringify(data)).pipe(retry(1), catchError(this.errorHandl));\n    }\n\n    createLayer(data) {\n      return this.http.post(`http://${this.ipAddress}/api/layers`, JSON.stringify(data)).pipe(retry(1), catchError(this.errorHandl));\n    }\n\n    cleanData() {\n      localStorage.removeItem('current_config');\n      this.currentConfig = null;\n    }\n\n    errorHandl(error) {\n      let errorMessage = '';\n\n      if (error.error instanceof ErrorEvent) {\n        // Get client-side error\n        errorMessage = error.error.message;\n      } else {\n        // Get server-side error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      return throwError(errorMessage);\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}